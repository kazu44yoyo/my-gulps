'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Minifier = undefined;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _stream = require('stream');

var _which = require('which');

var _which2 = _interopRequireDefault(_which);

var _package = require('../package.json');

var pkg = _interopRequireWildcard(_package);

var _fast_transformer = require('./fast_transformer');

var _safe_transformer = require('./safe_transformer');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Minifier extends _stream.Transform {
  constructor(options = {}) {
    super({ objectMode: true });

    this.binary = typeof options.binary == 'string' ? _path2.default.normalize(options.binary) : _which2.default.sync('php');

    this.mode = typeof options.mode == 'string' ? options.mode : 'safe';

    this.silent = typeof options.silent == 'boolean' ? options.silent : false;

    this._phpServer = null;

    this._transformer = this.mode == 'fast' ? new _fast_transformer.FastTransformer(this) : new _safe_transformer.SafeTransformer(this);
  }

  async _transform(file, encoding, callback) {
    try {
      if (!this.silent) console.log(`Minifying: ${ file.path }`);

      let data = await this._transformer.transform(file.path);
      file.contents = Buffer.from(data, encoding);

      if (typeof callback == 'function') callback(null, file);
    } catch (err) {
      if (typeof callback == 'function') callback(new Error(`[${ pkg.name }] ${ err.message }`));
    }

    return file;
  }
}
exports.Minifier = Minifier;